# docker-compose.yml

networks:
  tafsiri_net:
    driver: bridge  # A custom bridge network for inter-service communication

services:
  # FastAPI backend service for translation
  backend-fastapi:
    networks:
      - tafsiri_net
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend-fastapi
    ports:
      - "8000:8000"  # Expose FastAPI on port 8000
    volumes: []
      # - ./backend:/app
    env_file:
      - ./backend/.env
    restart: always

  # NodeJS backend service for authentication/login
  backend-nodejs:
    networks:
      - tafsiri_net
    build:
      context: ./backend
      dockerfile: Dockerfile.NodeJS
    container_name: backend-nodejs
    ports:
      - "5000:5000"  # Expose NodeJS backend on port 5000
    working_dir: /login/login
    volumes:
      - ./backend:/login
      - ./backend/login/.env:/login/.env
    env_file:
      - ./backend/login/.env
    depends_on:
      backend-database:
        condition: service_started  # Wait for database to start before running NodeJS backend
    command: node server.js
    restart: always

  # PostgreSQL database service
  backend-database:
    networks:
      - tafsiri_net
    image: postgres:15
    container_name: backend-dbpssql
    env_file:
      - ./backend/login/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist database data
      - ./backend/login/init.sql:/docker-entrypoint-initdb.d/init.sql  # Initialize DB schema
    ports:
      - "5432:5432"  # Expose PostgreSQL on port 5432
    restart: always

  # React frontend service served by Nginx
  frontend-reactjs:
    networks:
      - tafsiri_net
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-reactjs
    ports:
      - "3000:80"  # Expose frontend on port 3000 (mapped to Nginx port 80)
    volumes:
      - ./frontend:/app
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      backend-fastapi:
        condition: service_started  # Wait for FastAPI backend
      backend-nodejs:
        condition: service_started  # Wait for NodeJS backend
    restart: always

  # Prometheus metrics monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - tafsiri_net
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus config
    ports:
      - "9090:9090"
    restart: always

  # Grafana service for visualizing metrics
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"  # Access Grafana on localhost:3001
    networks:
      - tafsiri_net
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning  # Dashboards & datasources
    depends_on:
      - prometheus
    restart: always

volumes:
  postgres_data:  # Named volume for persistent
  grafana_data:  # Named volume for Grafana data

