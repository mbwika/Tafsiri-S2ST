
# Use an official Python image
FROM python:3.11.7

# Set the working directory inside the container
WORKDIR /app

# Install system dependencies required for torchaudio and FFmpeg
RUN apt update && apt install -y \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Copy the requirements file and install dependencies
COPY requirements.txt .

# Install Python dependencies, including SeamlessM4T-related libraries
RUN pip install --no-cache-dir -r requirements.txt

# Install additional tools for live-reloading (for development)
RUN pip install watchgod

# Install SeamlessM4T v2 model dependencies
RUN pip install torch torchaudio transformers

# Stage 1: Download and cache models separately
FROM python:3.11.7 AS builder
WORKDIR /cache

# Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
RUN apt update && apt install -y ffmpeg && rm -rf /var/lib/apt/lists/*

RUN pip install torch torchaudio transformers
RUN python -c "from transformers import AutoProcessor, SeamlessM4TModel; \
    SeamlessM4TModel.from_pretrained('facebook/seamless-m4t-v2-large'); \
    AutoProcessor.from_pretrained('facebook/seamless-m4t-v2-large')"

# Stage 2: Final image
FROM python:3.11.7
WORKDIR /app

# Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
RUN apt update && apt install -y ffmpeg && rm -rf /var/lib/apt/lists/*

# Copy cached models from builder stage
COPY --from=builder /root/.cache /root/.cache

# Copy application code
COPY . .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
# Uncomment the following lines if you want to use a different approach for development


# # Use an official Python image for development
# FROM python:3.11.7

# # Set the working directory inside the container
# WORKDIR /app

# # Install system dependencies for torchaudio (or any other dependencies)
# RUN apt update && apt install -y \
#     ffmpeg \
#     && rm -rf /var/lib/apt/lists/*

# # Copy the requirements file and install dependencies
# COPY requirements.txt .

# # Install development dependencies (this will be cached unless requirements.txt changes)
# RUN pip install --no-cache-dir -r requirements.txt

# # Install additional tools for live-reloading, like `watchgod` (used by Uvicorn for auto-reload)
# RUN pip install watchgod

# # Copy the application code
# COPY . .

# # Expose FastAPI's default port
# EXPOSE 8000

# # Use Uvicorn with --reload to enable live-reloading in development
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
