name: Tafsiri-S2ST CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
#   backend-tests:
#     name: Backend Tests
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: backend
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Set Up Python Environment
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.11.7'

#       - name: Install Backend Dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Run tests
#         run: PYTHONPATH=backend pytest test_main.py --disable-warnings

#   frontend-tests:
#     name: Frontend Tests
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: frontend
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Set Up Node.js Environment
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'

#       - name: Install Frontend Dependencies
#         run: npm install

#       - name: Run Frontend Tests
#         run: npm test

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          docker-compose build
          docker-compose push

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker-compose pull
            docker-compose up -d

#   Key Components of the Workflow:

#     Backend Tests (backend-tests job):

#         Checks out the repository.​

#         Sets up Python 3.11.​

#         Installs backend dependencies from backend/requirements.txt.​

#         Runs tests using pytest.​

#     Frontend Tests (frontend-tests job):

#         Checks out the repository.​

#         Sets up Node.js 18.​

#         Installs frontend dependencies from frontend/package.json.​

#         Runs frontend tests using npm test.​

#     Build and Deploy (build-and-deploy job):

#         Triggered only on the main branch after successful completion of both test jobs.​

#         Checks out the repository.​

#         Sets up Docker Buildx for multi-platform builds.​

#         Logs into DockerHub using credentials stored in GitHub Secrets.​

#         Builds and pushes Docker images using docker-compose.​

#         Deploys the updated application to the server via SSH, pulling the latest images and restarting the services.​

# Setup Instructions:

#     Store Sensitive Information Securely:

#         Navigate to your repository on GitHub.​

#         Go to Settings > Secrets and variables > Actions.​

#         Add the following secrets:​

#             DOCKERHUB_USERNAME: Your DockerHub username.

#             DOCKERHUB_TOKEN: Your DockerHub access token.

#             SERVER_HOST: The IP address or domain of your deployment server.

#             SERVER_USER: The SSH username for your server.

#             SERVER_PASSWORD: The SSH password for your server.

#     Ensure Docker Compose Configuration:

#         Verify that your docker-compose.yml file is correctly set up to build and push images to your DockerHub repository.​

#         Ensure that the services are configured to pull images from DockerHub and restart as needed during deployment.​

#     Commit the Workflow File:

#         Save the workflow YAML file as .github/workflows/ci-cd.yml in your repository.​

#         Commit and push the changes to trigger the GitHub Actions workflow.​

# This setup will automate the testing, building, and deployment of your Tafsiri-S2ST application whenever changes are pushed to the main branch or when pull requests are made.