# name: Tafsiri-S2ST CI/CD Pipeline
name: Tafsiri-S2ST CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend:
    name: Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.7'

      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Backend Tests (if any)
        run: echo "No tests for now"
        
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Install Frontend Dependencies
        run: npm install

      - name: Build Frontend
        run: npm run build

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Free up disk space
        run: |
          docker system prune -af
          docker volume prune -f
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          docker compose build
          docker compose push

  deploy:
    name: Deploy to DigitalOcean
    needs: build-and-deploy
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            export POSTGRES_DB="${POSTGRES_DB}"
            export POSTGRES_USER="${POSTGRES_USER}"
            export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"

            cd /opt/tafsiri-s2st  # Actual path
            git pull origin main
            docker compose down
            docker compose up --build -d
            curl -f http://localhost:8000/docs || exit 1
          EOF

        
  # deploy:
  #   name: Deploy Application
  #   needs: build-and-deploy
  #   runs-on: self-hosted  # Use a self-hosted runner for local deployment
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Deploy Locally
  #       run: |
  #         echo "Deploying locally..."
  #         docker compose down
  #         docker compose up --build -d
  #         curl -f http://localhost:8000/docs || exit 1
